---
- name: Self-Healing Playbook for Garbage Collection in Azure Red Hat OpenShift
  hosts: localhost
  become: true
  vars:
    oc_bin: /usr/local/bin/oc
    namespace: default
    problematic_pod_label: app=garbage-collector
    selective_label: existing-label=your-value
    azure_subscription_id: your_subscription_id
    key_vault_name: your_key_vault_name
    secret_name: your_secret_name
    aro_api_url: your_aro_api_url
    app_id: your_service_principal_id
    tenant_id: your_tenant_id
    client_secret: your_client_secret

  tasks:
    - name: Set environment variables for Azure authentication
      ansible.builtin.set_env:
        AZURE_CLIENT_ID: "{{ app_id }}"
        AZURE_SECRET: "{{ client_secret }}"
        AZURE_TENANT: "{{ tenant_id }}"
        AZURE_SUBSCRIPTION_ID: "{{ azure_subscription_id }}"

    - name: Log in to Azure
      command: >
        az login --service-principal --username {{ app_id }} --password {{ client_secret }} --tenant {{ tenant_id }}
      register: azure_login

    - name: Ensure Azure login was successful
      fail:
        msg: "Azure login failed"
      when: azure_login.rc != 0

    - name: Get OpenShift token from Key Vault
      command: >
        az keyvault secret show --name {{ secret_name }} --vault-name {{ key_vault_name }} --query value -o tsv
      register: aro_token

    - name: Set ARO token fact
      set_fact:
        aro_token_value: "{{ aro_token.stdout }}"

    - name: Log in to OpenShift
      shell: "{{ oc_bin }} login --token={{ aro_token_value }} --server={{ aro_api_url }}"
      register: oc_login

    - name: Ensure OpenShift login was successful
      fail:
        msg: "OpenShift login failed"
      when: oc_login.rc != 0

    - name: Add label to selected pods
      shell: "{{ oc_bin }} get pods -l {{ selective_label }} -n {{ namespace }} -o name | xargs -I {} {{ oc_bin }} label {} {{ problematic_pod_label }}"
      register: label_output

    - name: Check for Garbage Collector issues
      shell: "{{ oc_bin }} logs -l {{ problematic_pod_label }} -n {{ namespace }} | grep -i 'error'"
      register: gc_logs
      failed_when: false

    - name: Determine if action is needed
      set_fact:
        action_needed: "{{ gc_logs.stdout != '' }}"

    - name: Notify if no issues found
      debug:
        msg: "No garbage collector issues found."
      when: not action_needed

    - name: Restart problematic pods
      shell: "{{ oc_bin }} delete pod -l {{ problematic_pod_label }} -n {{ namespace }}"
      when: action_needed

    - name: Scale replicas up
      shell: "{{ oc_bin }} scale deployment {{ problematic_pod_label }} --replicas=3 -n {{ namespace }}"
      when: action_needed

    - name: Verify pods are running
      shell: "{{ oc_bin }} get pods -l {{ problematic_pod_label }} -n {{ namespace }}"
      register: pod_status

    - name: Wait for pods to be running
      wait_for:
        timeout: 300
        delay: 15
        state: started
        search_regex: "Running"
        path: /dev/null
      when: "'Running' not in pod_status.stdout"
